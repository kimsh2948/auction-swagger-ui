openapi: 3.0.0
info:
  title: Auction Platform API
  version: 1.0.0
  description: API documentation for various features of the auction platform, including prize events, auctions, and chat services.

servers:
  - url: http://<<URL>>/api
    description: Development server

paths:
  /oauth2/token:
    post: 
      tags:
        - Login
      summary: Authorization을 사용한 회원가입 및 로그인
      description: 로그인 처리 후 Access_Token과 Refresh_Token을 Json형식으로 반환
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
          description: naver login Authorization (지금은 네이버만)
      responses:
        '200':
          description: 엑세스 토큰과 리프레쉬 토큰을 생성해 json 으로 반환합니다.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
                
  /oauth2/user:
    post: 
      tags:
        - Login
      summary: Access_Token을 사용한 유저 정보 조회
      description: Access_Token을 받아 해당 유저의 정보를 반환
      parameters:
        - name: Authorization
          in: header        
          required: true
          schema:
            type: string
          description: Access_Token
      responses:
        '200':
          description: 유저 정보를 반환합니다.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '204':
          description: 유저 정보가 없습니다.
          content:
            application/json:
              schema:
                type: string
                example: "유저 정보가 없습니다."
        '400':
          description: 유효하지 않은 Authorization header
          content:
            application/json:
              schema:
                type: string
                example: "Invalid Authorization header"
        '401':
          description: 엑세스 토큰 만료
          content:
            application/json:               # content 내에 schema 정의
              schema:
                type: string
                example: "accessToken expired"
        '500':
          description: 예기치 못한 서버 오류
          content:
            application/json:
              schema:
                type: string
                example: "Internal Server Error"
                
  /oauth2/token/restore:
    post: 
      tags:
        - Login
      summary: Refresh_Token를 사용해 Access_Token과 Refresh_Token을 갱신합니다.
      description: Refresh_Token을 받아 Access_Token과 Refresh_Token을 Json형식으로 반환
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
          description: Refresh_Token
      responses:
        '200':
          description: 새로 갱신된 엑세스 토큰과 리프레쉬 토큰을 반환합니다.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Restore'
        '204':
          description: 유저 정보가 없습니다.
          content:
            application/json:
              schema:
                type: string
                example: "유저 정보가 없습니다."
        '400':
          description: 유효하지 않은 Authorization header
          content:
            application/json:
              schema:
                type: string
                example: "Invalid Authorization header"
        '401':
          description: 리프레쉬 토큰 만료
          content:
            application/json:
              schema:
                type: string
                example: "refreshToken expired"
        '500':
          description: 예기치 못한 서버 오류
          content:
            application/json:
              schema:
                type: string
                example: "Internal Server Error"
  /api/auctions:
    post:
      tags:
        - Auction
      summary: 경매 물품 등록
      description: 네이버 로그인한 사용자가 새로운 경매 물품을 등록합니다.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: 경매 물품의 제목
                name:
                  type: string
                  description: 경매 물품의 이름
                description:
                  type: string
                  description: 경매 물품에 대한 설명
                quantity:
                  type: integer
                  description: 경매 물품의 수량
                price:
                  type: string
                  description: 경매 시작 가격
                resisteredUserId:
                  type: integer
                  description: 경매 물품을 등록한 사용자 ID
                winningUserId:
                  type: integer
                  description: 경매에서 낙찰된 사용자 ID (낙찰되지 않은 경우 null)
                winningUserComment:
                  type: string
                  description: 낙찰된 사용자 코멘트 (낙찰되지 않은 경우 null)
                closedAuction:
                  type: string
                  description: 경매 종료 여부 (종료된 경우 "YES", 진행 중인 경우 "NO")
                images:
                  type: array
                  items:
                    type: string
                  description: 경매 물품의 이미지 파일 이름 목록
      responses:
        '200':
          description: 성공적으로 물품이 등록되었습니다.
          content:
            application/json:
              schema:
                type: string
                example: "경매 등록 성공!"

  /api/auctions/{id}:
    get:
      tags:
        - Auction
      summary: 경매 게시물 조회
      description: 경매 게시판의 특정 글을 조회합니다.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: 경매 ID
      responses:
        '200':
          description: 경매 정보를 반환합니다.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Auction'

  /api/auctions/bids/{id}:
    post:
      tags:
        - Auction
      summary: 경매 입찰
      description: 네이버 로그인한 사용자가 경매에 입찰합니다.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: 경매 ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                bidAmount:
                  type: integer
                  description: 입찰 금액
                comment:
                  type: string
                  description: 입찰자의 코멘트
      responses:
        '200':
          description: 성공적으로 입찰이 등록되었습니다.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bid'

  /api/auctions/close/{id}:
    post:
      tags:
        - Auction
      summary: 경매 마감
      description: 경매를 마감하고 낙찰자를 결정합니다.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: 경매 ID
      responses:
        '200':
          description: 경매가 마감되고 낙찰자가 결정되었습니다.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Auction'

  /api/auctions/chat/{id}:
    post:
      tags:
        - Auction
      summary: 채팅 시작
      description: 낙찰자와 물품 등록자 간의 채팅을 시작합니다.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: 경매 ID
      responses:
        '200':
          description: 채팅이 시작되었습니다.
          content:
            application/json:
              schema:
                type: string

  /api/auctions/list/open:
    get:
      tags:
        - Auction
      summary: 진행중인 경매 목록 조회
      description: 현재 진행중이고 종료되지 않은 경매 목록을 불러옵니다.
      responses:
        '200':
          description: 현재 진행중이고 종료되지 않은 경매 데이터들을 반환합니다.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuctionList'

  /api/auctions/list/closed:
    get:
      tags:
        - Auction
      summary: 종료된 경매 목록 조회
      description: 종료된 경매 목록을 불러옵니다.
      responses:
        '200':
          description: 현재 종료된 경매 데이터들을 반환합니다.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuctionList'
                  
  /prizes:
    post:
      tags:
        - Prize Event
      summary: Create a new prize
      description: 관리자에 의해 새로운 경품을 등록합니다.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 경품 이름
                description:
                  type: string
                  description: 경품 설명
                total_count:
                  type: integer
                  description: 총 경품 수량
                start_time:
                  type: string
                  format: date-time
                  description: 응모 시작 시간
              required:
                - name
                - total_count
                - start_time
      responses:
        '200':
          description: Prize created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Prize'

    get:
      tags:
        - Prize Event
      summary: Get all prizes
      description: 등록된 모든 경품을 조회합니다.
      responses:
        '200':
          description: Prizes retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Prize'

  /prizes/{prize_id}:
    get:
      tags:
        - Prize Event
      summary: Get prize details
      description: 특정 경품의 정보를 조회합니다.
      parameters:
        - in: path
          name: prize_id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Prize details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Prize'
  
  /prizes/{prize_id}/entries:
    post:
      tags:
        - Prize Event
      summary: Enter a prize
      description: 특정 경품에 대한 응모를 처리합니다.
      parameters:
        - in: path
          name: prize_id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Prize entry successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
        '400':
          description: Prize entry failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                  error:
                    type: string

  # /users/{user_id}/winners:
  #   get:
  #     tags:
  #       - Prize Event
  #     summary: Get user's winning records
  #     description: 특정 사용자의 당첨 기록을 조회합니다.
  #     parameters:
  #       - in: path
  #         name: user_id
  #         required: true
  #         schema:
  #           type: integer
  #     responses:
  #       '200':
  #         description: Winning records retrieved successfully
  #         content:
  #           application/json:
  #             schema:
  #               type: array
  #               items:
  #                 $ref: '#/components/schemas/Winner'

  /api/chats:
    post:
      tags:
          - Chat Management
      summary: Create a new chat room
      description: Create a chat room between the seller and the buyer after an auction is won.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                item_id:
                  type: string
                seller_id:
                  type: string
                buyer_id:
                  type: string
              required:
                - item_id
                - seller_id
                - buyer_id
      responses:
        '200':
          description: Chat room created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  chat_id:
                    type: string
                  status:
                    type: string
                    enum: [active]
                  created_at:
                    type: string
                    format: date-time

  /api/chats/{chat_id}/status:
    patch:
      tags:
          - Chat Management
      summary: Update chat room status
      description: Update the status of a chat room when the transaction is completed or canceled.
      parameters:
        - in: path
          name: chat_id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum: [completed, inactive]
      responses:
        '200':
          description: Chat room status updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  chat_id:
                    type: string
                  status:
                    type: string
                    enum: [completed, inactive]

  /api/chats/{chat_id}:
    get:
      tags:
          - Chat Management
      summary: Get chat room details
      description: Retrieve details of a specific chat room.
      parameters:
        - in: path
          name: chat_id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Chat room details retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  chat_id:
                    type: string
                  item_id:
                    type: string
                  seller_id:
                    type: string
                  buyer_id:
                    type: string
                  status:
                    type: string
                    enum: [active, completed, inactive]
                  created_at:
                    type: string
                    format: date-time

  /api/chats/{chat_id}/messages:
    get:
      tags:
          - Chat Management
      summary: Get messages in chat room
      description: Retrieve messages in a specific chat room with pagination.
      parameters:
        - in: path
          name: chat_id
          required: true
          schema:
            type: string
        - in: query
          name: last_message_id
          schema:
            type: string
        - in: query
          name: limit
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: Messages retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  chat_id:
                    type: string
                  messages:
                    type: array
                    items:
                      type: object
                      properties:
                        message_id:
                          type: string
                        sender_id:
                          type: string
                        message_text:
                          type: string
                        sent_at:
                          type: string
                          format: date-time
                  page:
                    type: integer
                  limit:
                    type: integer
                  total_messages:
                    type: integer

  /users/{user_id}/chats:
    get:
      tags:
          - Chat Management
      summary: Get chat rooms for a user
      description: Retrieve the list of chat rooms that a specific user is participating in.
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Chat rooms retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  user_id:
                    type: string
                  chats:
                    type: array
                    items:
                      type: object
                      properties:
                        chat_id:
                          type: string
                        item_id:
                          type: string
                        seller_id:
                          type: string
                        buyer_id:
                          type: string
                        status:
                          type: string
                          enum: [active, completed, inactive]
                        created_at:
                          type: string
                          format: date-time

components:
  schemas:
    Token:
      type: object
      properties:
        accessToken:
          type: string
          example: "Bearer {accessToken}"
        refreshToken:
          type: string
          example: "Bearer {refreshToken}"
    User:
      type: object
      properties:
        username:
          type: string
        name:
          type: string
        password:
          type: string
        email:
          type: string
        role:
          type: string
        provider:
          type: string
        createDate:
          type: string
          format: date-time
          example: 2024-10-10T00:00:00Z
    Restore:
      type: object
      properties:
        accessToken:
          type: string
        refreshToken:
          type: string
    Prize:
      type: object
      properties:
        prize_id:
          type: integer
        name:
          type: string
        description:
          type: string
        total_count:
          type: integer
        remaning_count:
          type: integer
        start_time:
          type: string
          format: date-time
          example: 2024-12-31T00:00:00

    Entry:
      type: object
      properties:
        entry_id:
          type: integer
        user_id:
          type: integer
        prize_id:
          type: integer
        entry_time:
          type: string
          format: date-time

    # Winner:
    #   type: object
    #   properties:
    #     winner_id:
    #       type: integer
    #     user_id:
    #       type: integer
    #     prize_id:
    #       type: integer
    #     winning_time:
    #       type: string
    #       format: date-time

    ChatRoom:
      type: object
      properties:
        chat_id:
          type: string
        item_id:
          type: string
        seller_id:
          type: string
        buyer_id:
          type: string
        status:
          type: string
          enum: [active, completed, inactive]
        created_at:
          type: string
          format: date-time

    Message:
      type: object
      properties:
        message_id:
          type: string
        chat_id:
          type: string
        sender_id:
          type: string
        message_text:
          type: string
        sent_at:
          type: string
          format: date-time

    UserChat:
      type: object
      properties:
        user_id:
          type: string
        chats:
          type: array
          items:
            $ref: '#/components/schemas/ChatRoom'

    Auction:
      type: object
      properties:
        id:
          type: integer
          example: 1
        title:
          type: string
          example: "롤렉스 서브마린 시계 경매 시작합니다!"
        name:
          type: string
          example: "롤렉스 서브마린 시계"
        description:
          type: string
          example: "아주 상태 좋은 A급 롤렉스 시계입니다. 많은 분들의 관심 바랍니다."
        quantity:
          type: integer
          example: 1
        startPrice:
          type: string
          example: "10000000"
        createDate:
          type: string
          format: date-time
          example: "2024-10-27T10:34:58.964793"
        endDate:
          type: string
          format: date-time
          nullable: true
          example: null
        images:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
                nullable: true
                example: null
              imageUrl:
                type: string
                format: uri
                example: "https://c~~~~~~~~e-1729992899000-0.jpg"

    Bid:
      type: object
      properties:
        id:
          type: integer
        auctionId:
          type: integer
        userId:
          type: integer
        bidAmount:
          type: integer
        comment:
          type: string

    AuctionList:
      type: array
      items:
        type: object
        properties:
          id:
            type: integer
            example: 1
          title:
            type: string
            example: "노스패이스 패딩 경매 시작합니다!"
          name:
            type: string
            example: "노스패이스 패딩"
          quantity:
            type: integer
            example: 1
          price:
            type: integer
            nullable: false
            example: 100000
          createDate:
            type: string
            format: date-time
            nullable: false
            example: "2025-01-08T10:28:38.955979460"
          endDate:
            type: string
            format: date-time
            nullable: false
            example: "2025-02-08T10:28:38.955979460"
          closedAuction:
            type: string
            example: "NO"
          images:
            type: array
            items:
              type: object
              properties:
                imageUrl:
                  type: string
                  format: uri
                  example: "https://jungmae.s3.ap-northeast-2.amazonaws.com/1_%EB%85%B8%EC%8A%A4%ED%8C%A8%EC%9D%B4%EC%8A%A4%20%ED%8C%A8%EB%94%A9/image-1736332122371-0.jpg"